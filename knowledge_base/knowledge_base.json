{
  "game_design": {
    "platformer_mechanics": [
      "Double jump allows players to reach higher platforms",
      "Wall jumping enables vertical movement and exploration",
      "Dash ability provides quick horizontal movement",
      "Collectibles encourage exploration and replayability",
      "Checkpoint system reduces frustration and maintains progress"
    ],
    "rpg_elements": [
      "Character progression through experience points",
      "Inventory system for managing items and equipment",
      "Quest system for structured gameplay objectives",
      "Dialogue system for storytelling and character interaction",
      "Combat mechanics with different attack types"
    ],
    "shooter_mechanics": [
      "Aim and shoot mechanics with mouse/keyboard or controller",
      "Weapon switching for different combat situations",
      "Health and armor systems for player survival",
      "Enemy AI with different behavior patterns",
      "Cover system for tactical gameplay"
    ],
    "puzzle_elements": [
      "Logic puzzles requiring problem-solving skills",
      "Physics-based puzzles using game world interactions",
      "Pattern recognition challenges",
      "Environmental puzzles using level elements",
      "Time-based puzzles adding urgency"
    ],
    "procedural_elements": [
      "Procedural generation creates infinite replayability",
      "Roguelike elements add challenge and variety",
      "Metroidvania-style exploration rewards player curiosity",
      "Procedural generation creates infinite replayability",
      "Roguelike elements add challenge and variety",
      "Metroidvania-style exploration rewards player curiosity",
      "Procedural generation creates infinite replayability",
      "Roguelike elements add challenge and variety",
      "Metroidvania-style exploration rewards player curiosity",
      "Procedural generation creates infinite replayability",
      "Roguelike elements add challenge and variety",
      "Metroidvania-style exploration rewards player curiosity",
      "Procedural generation creates infinite replayability",
      "Roguelike elements add challenge and variety",
      "Metroidvania-style exploration rewards player curiosity"
    ],
    "enemy_ai_patterns": [
      "Patrol AI moves between predefined waypoints and switches to chase mode when player is detected",
      "Boss AI uses multiple attack phases based on remaining health percentage",
      "Stealth AI hides from the player and sets up ambushes when the player is vulnerable",
      "Swarm AI coordinates multiple enemies to surround and overwhelm the player",
      "Ranged AI maintains distance while attacking and seeks cover when threatened",
      "Aggressive AI charges directly at the player and uses close-combat attacks",
      "Defensive AI prioritizes survival and retreats when health is low",
      "Support AI heals or buffs other enemies rather than attacking directly",
      "Sniper AI takes precise shots from long distances and relocates after each shot",
      "Tank AI absorbs damage and protects weaker enemies while dealing heavy damage"
    ],
    "level_design": [
      "Hub areas provide safe zones where players can rest, upgrade, and plan their next move",
      "Linear progression guides players through a clear path while allowing for exploration",
      "Open world design gives players freedom to explore and discover content at their own pace",
      "Metroidvania-style backtracking rewards players with new abilities that unlock previous areas",
      "Procedural generation creates unique levels each time while maintaining core gameplay elements",
      "Vertical level design uses height differences to create interesting movement and combat scenarios",
      "Environmental storytelling reveals narrative through level details rather than explicit dialogue",
      "Checkpoint systems reduce frustration by allowing players to restart from strategic points",
      "Secret areas reward exploration and provide optional challenges or rewards",
      "Dynamic environments change during gameplay to create evolving challenges"
    ],
    "storytelling": [
      "Environmental storytelling reveals plot through level design, objects, and atmosphere",
      "Character development through dialogue choices that affect relationships and story outcomes",
      "Multiple endings based on player decisions create replayability and consequence",
      "Flashback sequences reveal character backstory and motivation without exposition",
      "Unreliable narrator creates mystery and forces players to question what they know",
      "Parallel storylines follow different characters whose paths eventually converge",
      "Time manipulation allows players to experience the same events from different perspectives",
      "Moral choices with no clear right answer create meaningful player decisions",
      "Collectible lore items expand the world without interrupting gameplay flow",
      "Dynamic storytelling adapts the narrative based on player behavior and choices"
    ],
    "game_mechanics": [
      "Combo systems reward skilled play by chaining attacks for increased damage",
      "Resource management creates strategic depth through limited health, ammo, or energy",
      "Skill trees allow players to customize their character build and playstyle",
      "Crafting systems let players create items from collected materials",
      "Stealth mechanics reward careful planning and patience over direct confrontation",
      "Physics-based gameplay creates emergent behavior and realistic interactions",
      "Time manipulation allows players to slow, stop, or reverse time for strategic advantage",
      "Multiplayer mechanics encourage cooperation, competition, or both",
      "Progression systems provide long-term goals and sense of achievement",
      "Risk-reward mechanics make players choose between safety and greater rewards"
    ],
    "ai_ml_systems": [
      "Unity ML-Agents enables machine learning for game AI and behavior",
      "Behavior Trees create complex AI decision-making systems",
      "NavMesh provides automatic pathfinding for AI characters",
      "State Machines manage AI behavior transitions and logic",
      "Decision Trees create branching AI logic based on game conditions",
      "Neural Networks can be trained for adaptive AI behavior",
      "Reinforcement Learning allows AI to learn from player interactions",
      "Procedural AI generates dynamic behavior patterns and responses",
      "AI Perception systems detect and respond to player actions",
      "AI Memory systems remember past events and player behavior patterns"
    ],
    "networking": [
      "Client-Server architecture separates game logic from player input",
      "Peer-to-Peer networking allows direct connections between players",
      "Network synchronization keeps game state consistent across all players",
      "Lag compensation predicts player actions to reduce perceived delay",
      "Network prediction smooths movement and reduces jitter",
      "Authority systems determine which client controls specific game objects",
      "Network events efficiently transmit game state changes",
      "Room-based matchmaking groups players into game sessions",
      "Cross-platform networking enables play between different devices",
      "Network security prevents cheating and ensures fair gameplay"
    ],
    "game_feel": [
      "Juicy feedback makes every action feel satisfying with visual and audio cues",
      "Screen shake adds impact to important events like explosions and hits",
      "Particle effects provide immediate visual feedback for player actions",
      "Sound design reinforces visual feedback and creates emotional responses",
      "Controller rumble enhances tactile feedback for console and mobile games",
      "Color coding helps players quickly understand game state and information",
      "Smooth animations with easing curves feel more natural than linear movement",
      "Anticipation frames prepare players for upcoming actions or events",
      "Follow-through animation continues movement slightly after input stops",
      "Squash and stretch animation principles add life to character movement"
    ],
    "player_psychology": [
      "Variable reward schedules create addictive gameplay through unpredictable rewards",
      "Flow state occurs when challenge matches player skill level perfectly",
      "Mastery progression gives players long-term goals and skill development",
      "Social features like leaderboards and multiplayer increase engagement",
      "Narrative tension keeps players invested in story outcomes and character arcs",
      "Player agency allows meaningful choices that affect game world and story",
      "Cognitive load management prevents overwhelming players with too much information",
      "Progressive disclosure reveals complexity gradually as players learn",
      "Emotional investment through character development and relationship building",
      "Competence, autonomy, and relatedness are core psychological needs in games"
    ],
    "monetization": [
      "Free-to-play models use psychological triggers for sustainable revenue",
      "Battle pass systems create recurring engagement and predictable revenue",
      "Cosmetic-only monetization maintains game balance while generating revenue",
      "Seasonal content updates keep players engaged and returning regularly",
      "Analytics tracking helps understand player behavior and optimize retention",
      "A/B testing different features helps optimize player engagement",
      "Live service games require ongoing content development and community management",
      "Premium pricing models work best for narrative-driven single-player experiences",
      "Subscription models provide predictable revenue for ongoing development",
      "Regional pricing adjusts costs to local purchasing power and market conditions"
    ],
    "modern_trends": [
      "Procedural generation creates infinite content and reduces development time",
      "Machine learning AI creates adaptive opponents and dynamic difficulty",
      "Cloud gaming enables high-end experiences on low-power devices",
      "Cross-platform play increases player base and reduces matchmaking time",
      "User-generated content extends game life and builds community engagement",
      "Seasonal content models provide regular updates and predictable revenue",
      "Battle royale mechanics create intense competition and social sharing",
      "Roguelike elements add replayability through procedural generation",
      "Social features like guilds and trading create persistent engagement",
      "Esports integration requires balanced competitive gameplay and spectator features"
    ],
    "rpg_core_systems": [
      "Character classes define distinct playstyles with unique abilities and progression paths",
      "Experience points and leveling systems provide long-term progression and character growth",
      "Skill trees allow players to customize character builds and specialize in different areas",
      "Inventory management systems handle equipment, consumables, and quest items efficiently",
      "Quest systems provide structured objectives and narrative progression through the game world",
      "Dialogue systems enable character interaction and branching storylines based on choices",
      "Combat systems range from turn-based tactical battles to real-time action combat",
      "Crafting systems allow players to create items from collected materials and recipes",
      "Reputation systems track player actions and affect NPC reactions and story outcomes",
      "Party management enables multiple character control and team-based gameplay"
    ],
    "rpg_world_design": [
      "Open world design provides vast exploration areas with multiple storylines",
      "Hub areas serve as safe zones for rest, trading, and quest acceptance",
      "Dungeon design creates challenging environments with puzzles and combat encounters",
      "NPC schedules create living worlds where characters have daily routines",
      "Weather systems affect gameplay and create atmospheric immersion",
      "Day/night cycles change NPC behavior and unlock time-specific content",
      "Fast travel systems reduce backtracking while maintaining world immersion",
      "Secret areas reward exploration with unique items and story content",
      "Environmental storytelling reveals lore through world details and atmosphere",
      "World events create dynamic content that changes based on player actions"
    ],
    "fps_combat_systems": [
      "Weapon variety provides different engagement ranges and tactical options",
      "Aiming mechanics require precision and skill with mouse or controller input",
      "Recoil patterns create weapon mastery and realistic shooting mechanics",
      "Hit detection systems ensure accurate bullet impact and damage calculation",
      "Cover systems provide tactical positioning and protection from enemy fire",
      "Grenade and explosive mechanics add area denial and tactical depth",
      "Melee combat provides close-quarters options when ammunition is limited",
      "Weapon switching allows tactical adaptation to different combat situations",
      "Reload mechanics create tension and timing-based gameplay moments",
      "Headshot mechanics reward precision with increased damage multipliers"
    ],
    "fps_level_design": [
      "Sight lines and chokepoints create tactical positioning opportunities",
      "Vertical gameplay uses height differences for strategic advantage",
      "Cover placement provides protection while maintaining engagement options",
      "Spawn points must be balanced to prevent spawn camping and unfair advantages",
      "Map flow guides players through logical paths while preventing bottlenecks",
      "Power positions offer tactical advantages but are vulnerable to multiple angles",
      "Environmental destruction creates dynamic cover and tactical opportunities",
      "Lighting affects visibility and creates atmospheric tension in combat",
      "Sound design provides audio cues for enemy location and movement",
      "Objective-based gameplay focuses combat around specific goals and locations"
    ],
    "strategy_core_mechanics": [
      "Resource management creates strategic depth through limited materials and time",
      "Unit variety provides different tactical options and counter-play mechanics",
      "Terrain effects influence movement, combat, and strategic positioning",
      "Fog of war creates uncertainty and rewards scouting and information gathering",
      "Economy systems require balancing resource generation with military spending",
      "Technology trees unlock new units and abilities through research investment",
      "Diplomacy systems allow alliances, trade, and political manipulation",
      "Morale systems affect unit performance and create psychological warfare",
      "Supply lines limit expansion and create strategic vulnerabilities",
      "Victory conditions provide multiple paths to success beyond military conquest"
    ],
    "strategy_ai_balance": [
      "AI difficulty levels provide appropriate challenge for different skill levels",
      "Chess-like AI uses minimax algorithms for optimal strategic decision making",
      "Personality-based AI creates distinct opponents with different playstyles",
      "Adaptive AI learns from player strategies and adjusts tactics accordingly",
      "Resource cheating for AI provides challenge without perfect play requirements",
      "Faction balance ensures all playable sides have viable strategies",
      "Counter-play mechanics prevent dominant strategies from emerging",
      "Asymmetric balance creates different but equally powerful faction abilities",
      "Meta-game evolution keeps strategies fresh through patches and updates",
      "Spectator mode enables competitive play and tournament organization"
    ],
    "puzzle_design_principles": [
      "Progressive difficulty introduces mechanics gradually to avoid overwhelming players",
      "Aha moments create satisfying breakthroughs when players solve complex puzzles",
      "Multiple solution paths accommodate different problem-solving approaches",
      "Visual feedback clearly communicates puzzle state and available actions",
      "Hint systems provide assistance without completely solving the puzzle",
      "Puzzle variety prevents repetition and maintains player engagement",
      "Logical consistency ensures puzzle rules are clear and predictable",
      "Elegant solutions reward creative thinking and efficient problem-solving",
      "Puzzle sequences build complexity through combination of simple mechanics",
      "Accessibility features make puzzles solvable by players with different abilities"
    ],
    "puzzle_types_mechanics": [
      "Logic puzzles require deductive reasoning and elimination of possibilities",
      "Physics puzzles use realistic simulation for object interaction and movement",
      "Pattern recognition challenges identify sequences and relationships",
      "Spatial reasoning puzzles manipulate objects in 3D space",
      "Word puzzles use language and vocabulary for problem-solving",
      "Mathematical puzzles incorporate numbers and calculations",
      "Memory challenges test recall and pattern retention",
      "Timing puzzles require precise timing and rhythm",
      "Color and shape matching creates visual pattern recognition",
      "Mechanical puzzles simulate real-world devices and mechanisms"
    ],
    "platformer_movement": [
      "Precise jump mechanics provide satisfying control and skill expression",
      "Wall jumping enables vertical movement and exploration of higher areas",
      "Double jump extends aerial mobility and creates advanced movement options",
      "Dash ability provides quick horizontal movement and evasion",
      "Slide mechanics allow movement through tight spaces and under obstacles",
      "Grappling hooks create dynamic movement and exploration possibilities",
      "Momentum systems create fluid movement that feels natural and responsive",
      "Coyote time allows brief window for jump input after leaving platform",
      "Variable jump height based on button press duration provides fine control",
      "Air control allows mid-air direction changes for precise landing"
    ],
    "platformer_level_design": [
      "Checkpoint placement reduces frustration while maintaining challenge",
      "Secret areas reward exploration with collectibles and power-ups",
      "Vertical level design uses height differences for interesting movement",
      "Speed sections create variety and test player reflexes",
      "Boss arenas provide climactic encounters with unique mechanics",
      "Environmental hazards create danger zones requiring careful navigation",
      "Moving platforms add dynamic elements to static level geometry",
      "One-way passages guide players through intended level flow",
      "Multiple paths allow different approaches to level completion",
      "Visual storytelling reveals narrative through level design and atmosphere"
    ],
    "adventure_systems": [
      "Point-and-click interfaces provide intuitive interaction with game world",
      "Inventory puzzles require combining items to solve environmental challenges",
      "Dialogue trees create branching conversations and character relationships",
      "Environmental storytelling reveals narrative through world details",
      "Puzzle integration advances story while providing intellectual challenge",
      "Character development focuses on personality and relationships over stats",
      "Atmospheric design creates mood and emotional engagement",
      "Exploration rewards curiosity with story content and world building",
      "Non-linear storytelling allows player choice in narrative progression",
      "Emotional storytelling creates memorable characters and meaningful experiences"
    ],
    "simulation_systems": [
      "Realistic physics simulation creates authentic object behavior and interaction",
      "Economic systems model supply, demand, and market dynamics",
      "Social simulation creates believable NPC behavior and relationships",
      "Weather systems affect gameplay and create dynamic environmental challenges",
      "Time progression allows long-term planning and strategic decision making",
      "Resource management balances multiple competing needs and priorities",
      "Random events create unpredictability and challenge player adaptability",
      "Complex systems interact to create emergent gameplay and unexpected outcomes",
      "Data visualization helps players understand complex system relationships",
      "Modding support extends game life through community-created content"
    ],
    "sports_systems": [
      "Realistic physics create authentic ball movement and player interaction",
      "Team management allows roster building and strategic player development",
      "Season modes provide long-term progression and career simulation",
      "Multiplayer competition creates social engagement and replayability",
      "Skill-based controls reward practice and mastery of game mechanics",
      "Commentary systems provide context and atmosphere for sports events",
      "Replay systems allow analysis of key moments and highlight creation",
      "Customization options personalize teams, players, and equipment",
      "Tournament modes create structured competitive play and progression",
      "Real-time strategy elements add tactical depth to sports simulation"
    ],
    "racing_systems": [
      "Vehicle physics create realistic handling and performance characteristics",
      "Track design balances challenge with accessibility for different skill levels",
      "Upgrade systems allow vehicle customization and performance improvement",
      "Driving assists help new players while advanced options challenge experts",
      "Weather effects create dynamic racing conditions and strategic decisions",
      "Multiplayer racing creates competitive excitement and social interaction",
      "Replay systems capture dramatic moments and allow race analysis",
      "Customization options personalize vehicles and driver appearance",
      "Championship modes provide structured progression and long-term goals",
      "Arcade vs simulation modes accommodate different player preferences"
    ],
    "demo_knowledge": [
      "RAG systems provide context-aware suggestions for game development",
      "Genre-specific knowledge improves suggestion relevance and accuracy",
      "Unity integration enables practical implementation guidance"
    ]
  },
  "unity_specific": {
    "player_controller": [
      "Use Input.GetAxis for smooth movement",
      "Apply forces to Rigidbody for physics-based movement",
      "Use Transform.Translate for direct position changes",
      "Implement ground checking with raycasts",
      "Use Animator for smooth animations"
    ],
    "game_management": [
      "Use GameManager singleton for global game state",
      "Implement scene management with SceneManager",
      "Use PlayerPrefs for saving game data",
      "Create event system for loose coupling",
      "Use coroutines for time-based actions"
    ],
    "ui_systems": [
      "Use Canvas for UI layout and scaling",
      "Implement UI Manager for centralized UI control",
      "Use Text components for displaying information",
      "Create button interactions with OnClick events",
      "Use UI animations for smooth transitions"
    ],
    "audio_systems": [
      "Use AudioSource component for sound playback",
      "Implement AudioManager for centralized audio control",
      "Use AudioMixer for volume and effects management",
      "Create sound pools for performance optimization",
      "Use 3D audio for spatial sound effects",
      "Audio Mixer provides advanced audio routing and effects processing",
      "Spatial Audio creates 3D sound positioning for immersive experiences",
      "Audio Filters like low-pass and high-pass create dynamic sound effects",
      "Audio Reverb Zones simulate realistic acoustic environments",
      "Audio Doppler Effect creates realistic sound changes for moving objects",
      "Audio Occlusion blocks sound through walls and obstacles",
      "Audio Compression reduces file size while maintaining sound quality",
      "Audio Streaming loads audio files progressively to save memory",
      "Audio Visualization creates real-time visual representations of sound",
      "Audio Ducking automatically lowers background music during dialogue"
    ],
    "camera_systems": [
      "Cinemachine provides advanced camera controls with virtual cameras and brain system",
      "Follow camera smoothly tracks the player with configurable damping and offset",
      "Camera shake adds impact to explosions, hits, and dramatic moments",
      "Multiple camera angles can be switched between for different gameplay situations",
      "Camera collision detection prevents the camera from clipping through walls",
      "Smooth camera transitions create cinematic effects between scenes",
      "Camera zoom can be used for dramatic effect or gameplay mechanics",
      "Split-screen cameras allow multiple players to see their own view",
      "Camera filters and post-processing create mood and atmosphere",
      "Dynamic camera positioning adapts to the environment and player actions"
    ],
    "lighting": [
      "Global illumination creates realistic lighting that bounces off surfaces naturally",
      "Dynamic lighting can change during gameplay to affect atmosphere and gameplay",
      "Light probes capture lighting information for moving objects",
      "Shadow mapping creates realistic shadows that enhance depth perception",
      "Volumetric lighting creates atmospheric effects like fog and dust",
      "Light cookies project patterns or textures through lights for dramatic effects",
      "Light layers allow different lights to affect specific objects or layers",
      "Real-time lighting provides immediate visual feedback for dynamic scenes",
      "Baked lighting improves performance for static environments",
      "Light intensity and color can be animated for dramatic effects"
    ],
    "textures": [
      "PBR (Physically Based Rendering) textures create realistic material appearance",
      "Texture atlasing combines multiple textures into one image to improve performance",
      "Normal maps add surface detail without increasing polygon count",
      "Specular maps control how shiny or rough a surface appears",
      "Emission maps make parts of textures glow for effects like neon or fire",
      "Detail textures add fine surface detail when viewed up close",
      "Texture streaming loads high-resolution textures only when needed",
      "Mipmaps provide different resolution versions for distance-based rendering",
      "Texture compression reduces file size while maintaining visual quality",
      "Procedural textures can be generated in real-time for infinite variety"
    ],
    "animation_systems": [
      "Animator Controller manages state machines for complex character animations",
      "Blend Trees smoothly transition between multiple animations based on parameters",
      "Animation Events trigger code execution at specific points in animations",
      "IK (Inverse Kinematics) creates realistic limb movement for characters",
      "Animation Curves allow fine-tuned control over animation timing and values",
      "Root Motion enables character movement driven by animation data",
      "Animation Layers allow multiple animations to play simultaneously",
      "Animation Override Controllers swap animations at runtime for different characters",
      "Animation Rigging provides advanced character setup and control",
      "Animation Compression reduces file size while maintaining quality"
    ],
    "physics_systems": [
      "Rigidbody components enable realistic physics simulation for objects",
      "Colliders define the physical shape and boundaries of game objects",
      "Physics Materials control friction, bounciness, and other surface properties",
      "Joints connect objects together with constraints like hinges and springs",
      "Raycasting detects collisions along a line for shooting and detection",
      "Trigger colliders detect overlaps without physical collision response",
      "Physics layers allow selective collision detection between object groups",
      "Force and torque can be applied to create realistic object movement",
      "Cloth simulation creates realistic fabric movement for clothing and flags",
      "Terrain colliders provide efficient collision for large landscape objects"
    ],
    "particle_systems": [
      "Particle Systems create visual effects like explosions, fire, and magic",
      "VFX Graph provides node-based visual effects for complex particle systems",
      "Emission modules control how and when particles are spawned",
      "Shape modules define the area where particles are emitted from",
      "Velocity modules control particle movement and direction",
      "Color over Lifetime creates dynamic color changes during particle lifetime",
      "Size over Lifetime allows particles to grow or shrink over time",
      "Force fields create areas that affect particle movement and behavior",
      "Sub-emitters spawn additional particles when main particles die",
      "Particle collision enables particles to interact with game world objects"
    ],
    "vr_ar_development": [
      "XR Toolkit provides cross-platform VR/AR development framework",
      "Hand tracking enables natural interaction without controllers",
      "Eye tracking creates immersive experiences based on gaze direction",
      "Spatial audio creates realistic 3D sound positioning in VR",
      "Room-scale VR allows players to move physically in virtual space",
      "Haptic feedback provides tactile sensations for enhanced immersion",
      "VR locomotion systems prevent motion sickness during movement",
      "AR plane detection identifies real-world surfaces for object placement",
      "Mixed reality combines virtual and real-world elements seamlessly",
      "VR optimization targets 90+ FPS for comfortable virtual experiences"
    ],
    "scripting_best_practices": [
      "Use ScriptableObjects for data-driven design to separate data from logic",
      "Implement interfaces for flexible component design and easy testing",
      "Use events and delegates for loose coupling between game systems",
      "Coroutines handle time-based operations without blocking the main thread",
      "Object pooling improves performance by reusing objects instead of instantiation",
      "Use [SerializeField] to expose private fields in the Inspector for debugging",
      "Implement OnValidate() for custom validation when values change in Inspector",
      "Use [System.Serializable] for custom classes to appear in Inspector",
      "ScriptableObject.CreateInstance() creates runtime instances without asset files",
      "Use [RequireComponent] to ensure required components are automatically added"
    ],
    "tech_trends": [
      "Ray tracing creates realistic lighting and reflections in real-time",
      "AI-powered animation reduces manual keyframing and creates natural movement",
      "Procedural audio generates dynamic soundscapes based on game events",
      "Cloud computing enables complex simulations and large-scale multiplayer",
      "5G networks reduce latency for mobile and cloud gaming experiences",
      "Blockchain enables true ownership of digital assets and cross-game items",
      "Augmented reality overlays game content on the real world",
      "Voice recognition allows natural language interaction with game systems",
      "Gesture controls provide intuitive interaction without physical controllers",
      "Haptic feedback creates tactile sensations for enhanced immersion"
    ]
  },
  "best_practices": {
    "code_organization": [
      "Separate concerns with different script components",
      "Use inheritance for similar game objects",
      "Implement interfaces for flexible design",
      "Use ScriptableObjects for data-driven design",
      "Follow Unity naming conventions"
    ],
    "performance": [
      "Use object pooling for frequently created objects",
      "Optimize with LOD (Level of Detail) systems",
      "Use culling for off-screen objects",
      "Minimize garbage collection with proper memory management",
      "Use async operations for non-blocking code"
    ],
    "user_experience": [
      "Provide clear visual feedback for player actions",
      "Implement smooth camera movement and transitions",
      "Use consistent input mapping across the game",
      "Provide accessibility options for different players",
      "Create intuitive UI with clear navigation"
    ],
    "performance_optimization": [
      "Object Pooling reuses objects instead of creating and destroying them",
      "LOD (Level of Detail) reduces polygon count for distant objects",
      "Occlusion Culling hides objects that are not visible to the camera",
      "Texture Streaming loads high-resolution textures only when needed",
      "GPU Instancing renders multiple objects with a single draw call",
      "Static Batching combines static objects to reduce draw calls",
      "Dynamic Batching automatically batches small dynamic objects",
      "Memory Profiling identifies memory leaks and optimization opportunities",
      "Frame Rate Optimization targets consistent 60 FPS for smooth gameplay",
      "Build Optimization reduces final game size and improves loading times"
    ],
    "mobile_development": [
      "Touch controls provide intuitive interaction for mobile devices",
      "Gesture recognition enables swipe, pinch, and multi-touch actions",
      "Mobile optimization targets 30-60 FPS on various device capabilities",
      "Battery optimization reduces power consumption for longer play sessions",
      "Memory management is critical for devices with limited RAM",
      "App store guidelines must be followed for successful publication",
      "Mobile UI design prioritizes thumb-friendly interface elements",
      "Cloud saves enable cross-device progress synchronization",
      "Mobile analytics track user behavior and app performance",
      "Push notifications re-engage players and increase retention"
    ],
    "unity_performance": [
      "Use GetComponent sparingly and cache references in Start() or Awake()",
      "Avoid Find() and FindObjectOfType() in Update() - cache references instead",
      "Use Object.Instantiate() with object pooling for frequently created objects",
      "Enable 'Static' flag for objects that don't move to enable batching",
      "Use SetActive() instead of Destroy() for frequently toggled objects",
      "Minimize garbage collection by avoiding string concatenation in loops",
      "Use Vector3.zero instead of new Vector3(0,0,0) to avoid allocation",
      "Enable 'Optimize Mesh Data' in model import settings for better performance",
      "Use LOD Groups for complex objects viewed at different distances",
      "Implement occlusion culling for large scenes with many objects"
    ],
    "accessibility": [
      "Colorblind-friendly design uses patterns and shapes in addition to colors",
      "Adjustable text size accommodates players with visual impairments",
      "Remappable controls allow players to customize input to their needs",
      "Subtitles and closed captions make audio content accessible to all players",
      "High contrast modes help players distinguish game elements clearly",
      "Audio cues provide information for players with visual impairments",
      "One-handed play options accommodate players with limited mobility",
      "Seizure warnings and safe modes protect players with photosensitivity",
      "Difficulty options allow players to adjust challenge to their skill level",
      "Clear UI design with readable fonts and adequate spacing improves accessibility"
    ],
    "code_quality": [
      "SOLID principles create maintainable and extensible code architecture",
      "Design patterns solve common programming problems in reusable ways",
      "Unit testing ensures code reliability and enables safe refactoring",
      "Code reviews catch bugs early and share knowledge across the team",
      "Documentation helps new developers understand and maintain existing code",
      "Version control with Git enables collaboration and tracks code history",
      "Continuous integration automates testing and deployment processes",
      "Code formatting standards improve readability and reduce merge conflicts",
      "Performance profiling identifies bottlenecks before they become problems",
      "Security best practices protect against common vulnerabilities and exploits"
    ],
    "platform_guidelines": [
      "App Store guidelines require specific UI patterns and content restrictions",
      "Google Play policies enforce similar but distinct requirements from iOS",
      "Steam requires specific store page formatting and community features",
      "Console certification processes have strict technical and content requirements",
      "WebGL builds need optimization for browser performance limitations",
      "Mobile games require touch-friendly UI and battery optimization",
      "PC games benefit from keyboard/mouse controls and scalable graphics",
      "VR games need 90+ FPS and motion sickness prevention techniques",
      "Switch development requires consideration of portable and docked modes",
      "Cross-platform development needs careful input and UI adaptation"
    ]
  }
}